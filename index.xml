<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dom&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Dom&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>All rights reserved.</copyright>
    <lastBuildDate>Tue, 09 Aug 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debian Squeeze 64 Vagrant Base Box Upgrade Recipe</title>
      <link>http://localhost:1313/2011/08/debian-squeeze-64-vagrant-base-box-upgrade-recipe/</link>
      <pubDate>Tue, 09 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2011/08/debian-squeeze-64-vagrant-base-box-upgrade-recipe/</guid>
      <description>After building a Vagrant base box, Vagrant and Virtual Box updates incurred lots of upgrades. This article gives a recipe to do that quickly and efficiently.
Build a new environment mkdir /tmp/upgrade cd /tmp/upgrade vagrant init squeeze64 vagrant up vagrant halt At that point the VM is stoped. Launch it from the Virtual Box GUI and mount the guest tools (Host+D).
Upgrade Log into the VM through vagrant:
vagrant ssh Upgrade the OS and the tools:</description>
    </item>
    
    <item>
      <title>Debian Squeeze 64 Vagrant Base Box</title>
      <link>http://localhost:1313/2011/03/debian-squeeze-64-vagrant-base-box/</link>
      <pubDate>Sat, 26 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2011/03/debian-squeeze-64-vagrant-base-box/</guid>
      <description>Lately I needed to test a project under Debian Squeeze 64 bit. I found several 32 bit boxes but no 64 bits. So I decided to build one of my own.
Quickstart To get up and running you just need to:
gem install vagrant vagrant box add squeeze64 http://dl.dropbox.com/u/937870/VMs/squeeze64.box vagrant init squeeze64 vagrant up Details The base box has the following characteristics:
 275Mb in it&amp;rsquo;s packaged form; 8Gb hard drive; Debian Squeeze with a linux-image-2.</description>
    </item>
    
    <item>
      <title>JMX4R : JMX en Ruby</title>
      <link>http://localhost:1313/2010/11/jmx4r--jmx-en-ruby/</link>
      <pubDate>Wed, 24 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2010/11/jmx4r--jmx-en-ruby/</guid>
      <description>Lorsqu&amp;rsquo;on souhaite superviser et administrer une application Java pendant son exécution la solution qui s&amp;rsquo;impose est JMX. Malheureusement, écrire un client JMX n&amp;rsquo;est pas trivial. Une solution possible est l&amp;rsquo;utilisation de JMX4R une gemme Ruby conçue dans cette optique.
Dans le billet précédent, j&amp;rsquo;ai présenté JMXTerm, un client JMX en ligne de commande très pratique pour accéder interactivement à JMX. Il a cependant le défaut d&amp;rsquo;être relativement difficile et lourd à automatiser.</description>
    </item>
    
    <item>
      <title>JMXTerm : JMX en ligne de commande</title>
      <link>http://localhost:1313/2010/11/jmxterm--jmx-en-ligne-de-commande/</link>
      <pubDate>Sat, 13 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2010/11/jmxterm--jmx-en-ligne-de-commande/</guid>
      <description>Il est parfois utile de pouvoir consulter les informations de supervision d&amp;rsquo;une machine virtuelle Java qui s&amp;rsquo;exécute sur un serveur distant. Malheureusement, l&amp;rsquo;agent JMX n&amp;rsquo;est pas toujours configuré pour un accès distant ou cet accès distant est difficile du fait de la topologie réseau.
Si le JDK est installé sur la machine distante, il est toujours possible de se connecter au serveur en faisant suivre une session X et de lancer un jconsole directement sur le serveur :</description>
    </item>
    
    <item>
      <title>Analyser des paquets ISUP avec Wireshark</title>
      <link>http://localhost:1313/2010/06/analyser-des-paquets-isup-avec-wireshark/</link>
      <pubDate>Sun, 06 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2010/06/analyser-des-paquets-isup-avec-wireshark/</guid>
      <description>Il y a quelques temps j&amp;rsquo;ai eu à analyser des journaux contenant des messages ISUP avec Wireshark. L&amp;rsquo;opération n&amp;rsquo;est pas triviale, mais une fois comprise elle est relativement simple à mettre en oeuvre dans un script. Le suite de cette article décrit les étapes nécessaires à la transformation d&amp;rsquo;un message MTP en un message SIGTRAN pour permettre son analyse par Wireshark.
Le décor Wireshark est sans aucun doute le plus connu et le plus complet des outils d&amp;rsquo;analyse de trafic libres.</description>
    </item>
    
    <item>
      <title>Scala Days 2010</title>
      <link>http://localhost:1313/2010/04/scala-days-2010/</link>
      <pubDate>Fri, 16 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2010/04/scala-days-2010/</guid>
      <description>Les 15 et 16 avril 2010 j&amp;rsquo;ai eu la chance d&amp;rsquo;assister aux Scala Days à Lausanne (Suisse). Il s&amp;rsquo;agissait d&amp;rsquo;une conférence autour du langage de programmation multi-paradigme Scala, ses applications et son futur.
Scala est un langage de programmation conçu à l&amp;rsquo;École Polytechnique Fédérale de Lausanne. Il intègre les paradigmes de programmation fonctionnelle avec ceux de la programmation orientée objet. Son typage est statique mais le système d&amp;rsquo;inférence de types du compilateur permet de se passer, dans un grand nombre de cas, de la lourdeur habituellement imposée par cette catégorie de langages.</description>
    </item>
    
  </channel>
</rss>